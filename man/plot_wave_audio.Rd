% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot-wave-channel.R
\name{plot_wave_audio}
\alias{plot_wave_audio}
\alias{plot_wave_channel_fancy}
\alias{plot_wave_channel_base}
\alias{process_wave_channel}
\alias{add_play_tracker_line}
\title{Plot wave channels of audio file}
\usage{
plot_wave_audio(
  audio_obj,
  source = "wave_audio",
  type = c("left", "right", "stereo"),
  format = c("fancy", "base"),
  hollow = FALSE,
  simplify = TRUE,
  nr = 2500,
  include_info = TRUE,
  range_slider = TRUE,
  plot_title = NULL,
  xunit = c("Time", "Samples"),
  ylim = NULL,
  xlab = NULL,
  ylab = NULL
)

plot_wave_channel_fancy(
  audio_data,
  audio_params,
  source = NULL,
  ylim = NULL,
  xlab = "Time",
  ylab = "Audio Channel",
  plot_title = NULL,
  axes = TRUE,
  hollow = FALSE,
  show_y_axis = FALSE,
  line_color = "#ADD8E6",
  ft_color = "lightgrey",
  bg_color = "#252525",
  range_slider = TRUE
)

plot_wave_channel_base(
  audio_data,
  audio_params,
  ylim = NULL,
  xlab = NULL,
  ylab = NULL,
  plot_title = NULL,
  axes = TRUE,
  center = TRUE
)

process_wave_channel(audio_obj, xunit = "Time", simplify = TRUE, nr = 2500)

add_play_tracker_line(
  pl_plotly = NULL,
  proxy = NULL,
  x_val = 0,
  color = "red",
  shapeId = "redTrackerLine"
)
}
\arguments{
\item{audio_obj}{a \code{tuneR} audio object.}

\item{source}{a character string of length 1. Match the value of this string
with the source argument in \code{plotly::plot_ly()} to respond to events
emitted from that specific plot. Only used if \code{format = "fancy"}.
See \code{?plotly::event_data} for more details.}

\item{type}{channel to plot. One of \code{c("left", "right", "stereo")}.}

\item{format}{format type. \code{"fancy"} is experimental and will eventually be
the main one used within the app.}

\item{hollow}{Logical (\code{TRUE}/\code{FALSE}). If \code{TRUE}, make the plot hollow. Only usable for \code{"fancy"} plots.}

\item{simplify}{Logical (\code{TRUE}/\code{FALSE}). Whether to simplify large audio files. Defaults to \code{TRUE}.}

\item{nr}{noise reduction. Only takes affect if \code{simplify = TRUE}.}

\item{include_info}{Logical (\code{TRUE}/\code{FALSE}). If \code{TRUE}, append information
about the audio file.}

\item{plot_title}{a title for the plot (optional).}

\item{xunit}{unit for x-axis. One of \code{c("Time", "Samples")}.}

\item{ylim}{y-limit. Will be determined if not set.}

\item{xlab}{label for x-axis. Defaults to \code{xunit} if not set.}

\item{ylab}{label for y-axis. Will be determined if not set.}

\item{audio_data}{Audio data returned from \code{process_wave_channel}.}

\item{audio_params}{List of audio parameters returned from \code{process_wave_channel}.}

\item{axes}{Logical (\code{TRUE}/\code{FALSE}). If \code{TRUE}, add axes to the plot}

\item{center}{Logical (\code{TRUE}/\code{FALSE}). If \code{TRUE}, center the plot}

\item{pl_plotly}{a \code{plotly} object. Only one of \code{proxy}, \code{pl_plotly} should be supplied.}

\item{proxy}{a \code{plotly::plotlyProxy} object used for updating the location of the tracker.
Only one of \code{proxy}, \code{pl_plotly} should be supplied.}

\item{x_val}{x-axis coordinate for placing the vertical line.}

\item{color}{color of line}

\item{shapeId}{id of the shape to be tracked. Required for updating the location.}
}
\value{
a \code{plotly} object if \code{format = "fancy"}. Otherwise \code{NULL} invisibly
}
\description{
Plot wave channels of audio file

New plotting method

Original plotting method

Process Wave channel

Add vertical line to plotly object to track current play time
}
\details{
plot_wave_channel and plot_wave_audio were inspired by
tuneR's plotting method:
https://github.com/cran/tuneR/blob/master/R/plot-Wave.R
We want more control, the ability to plot the average (versus left and right),
and an interactive plot

Not sure if \code{source} will be supported for \code{stereo} types
}
\examples{
\dontrun{
audio_obj <- tuneR::readMP3(file.path(EXAMPLE_AUDIO_DIR, "flowers.mp3"))

plot_wave_audio(audio_obj, format = "base")

plot_wave_audio(audio_obj, type = "right")

plot_wave_audio(audio_obj, type = "stereo")

# step-wise
wave_channel <- process_wave_channel(audio_obj, xunit = "Time", simplify = TRUE, nr = 2500)

plot_wave_channel_fancy(audio_data = wave_channel$audio_data, audio_params = wave_channel$params)

# Add tracker

pl_plotly <- plot_wave_audio(audio_obj, format = "fancy") \%>\%
    add_play_tracker_line(0.3)
}


}
\keyword{internal}
