% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot-wave-channel.R
\name{plot_wave_audio}
\alias{plot_wave_audio}
\title{Plot wave channels of audio file}
\usage{
plot_wave_audio(
  audio_obj,
  type = c("left", "right", "stereo"),
  format = c("fancy", "base"),
  hollow = FALSE,
  simplify = TRUE,
  nr = 2500,
  include_info = TRUE,
  plot_title = NULL,
  xunit = c("Time", "Samples"),
  ylim = NULL,
  xlab = NULL,
  ylab = NULL
)
}
\arguments{
\item{audio_obj}{a \code{tuneR} audio object.}

\item{type}{channel to plot. One of \code{c("left", "right", "stereo")}.}

\item{format}{format type. \code{"fancy"} is experimental and will eventually be
the main one used within the app.}

\item{hollow}{Logical (\code{TRUE}/\code{FALSE}). If \code{TRUE}, make the plot hollow. Only usable for \code{"fancy"} plots.}

\item{simplify}{Logical (\code{TRUE}/\code{FALSE}). Whether to simplify large audio files. Defaults to \code{TRUE}.}

\item{nr}{noise reduction. Only takes affect if \code{simplify = TRUE}.}

\item{include_info}{Logical (\code{TRUE}/\code{FALSE}). If \code{TRUE}, append information
about the audio file.}

\item{plot_title}{a title for the plot (optional).}

\item{xunit}{unit for x-axis. One of \code{c("Time", "Samples")}.}

\item{ylim}{y-limit. Will be determined if not set.}

\item{xlab}{label for x-axis. Defaults to \code{xunit} if not set.}

\item{ylab}{label for y-axis. Will be determined if not set.}
}
\value{
a \code{plotly} object if \code{format = "fancy"}. Otherwise \code{NULL} invisibly
}
\description{
Plot wave channels of audio file
}
\details{
plot_wave_channel and plot_wave_audio were inspired by
tuneR's plotting method:
https://github.com/cran/tuneR/blob/master/R/plot-Wave.R
We want more control, the ability to plot the average (versus left and right),
and an interactive plot
}
\examples{
\dontrun{
audio_obj <- tuneR::readMP3(file.path(EXAMPLE_AUDIO_DIR, "flowers.mp3"))

plot_wave_audio(audio_obj)

plot_wave_audio(audio_obj, type = "right")

plot_wave_audio(audio_obj, type = "stereo")

# Experimental
plot_wave_audio(audio_obj, format = "fancy")
}


}
