% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/packageDevelopmentBackground.R
\name{my_function}
\alias{my_function}
\title{Append a symbol to a dataframe. This is the title.}
\usage{
my_function(data, symbol = c("a", "b"), add_id_col = FALSE, group_by_col)
}
\arguments{
\item{data}{a dataset. Defaults to \code{mtcars}.}

\item{symbol}{the symbol to append}

\item{add_id_col}{Logical (\code{TRUE}/\code{FALSE}). If \code{TRUE}, add an ID column and
append it to the front of the dataframe.}

\item{group_by_col}{column to group by if creating an ID column.}
}
\value{
a dataframe
}
\description{
Adds the chosen symbol as a column to the end of a dataframe, and optionally create
an ID column. This will be the description.
}
\details{
This is a terrible, disgusting function. Why would you ever want to do this.
Im mainly trying to illustrate the different types of arguments/defaults you
can have, and how roxygen/the loaded function will work.

The \verb{@importFrom} statements above will not show up in the helper file (this text will),
however the \code{NAMESPACE} file will update when you run \code{devtools::document()} if you modify them.

The \verb{@importFrom} statements above translate to:
\itemize{
\item "import \code{syms} and \code{sym} from the package \code{rlang}
\item "import \code{n} from the package \code{dplyr}
}

\strong{bolded} word

\emph{italizized phrase}

\verb{this phrase} will appear as code

This section will be a code block:

\if{html}{\out{<div class="sourceCode">}}\preformatted{# Adds a new column to a dataset, repeating 'A' all the way down (see ?dplyr::mutate for more details):
data \%>\% dplyr::mutate(new_column = "A")
}\if{html}{\out{</div>}}
}
\note{
\code{mtcars} is an example dataset exported by the \code{datasets} package, and
comes with the base installation of R.
}
\examples{

\dontrun{
# Defaults to symbol 'a'
my_function(data = mtcars)

# Defaults to `mtcars` dataset
my_function(data = mtcars, symbol = "b")

# Create ID and row_number columns
my_function(data = mtcars, add_id_col = TRUE, group_by_col = "gear")

# Would error out in a controlled way:
my_function(data = mtcars, add_id_col = TRUE)
my_function(data = mtcars, add_id_col = TRUE, group_by_col = "columnDoesntExist")
my_function(data = mtcars, symbol = "c")
}


}
\keyword{internal}
